Name	 ALU;
PartNo   ALU;
Date     12/12/2023;
Revision 01;
Designer Sponaugle;
Company  Ratiometric;
Assembly None;
Location None;
Device   f1508ispplcc84;

PROPERTY ATMEL {TDI_PULLUP = ON};
PROPERTY ATMEL {TMS_PULLUP = ON};
PROPERTY ATMEL {XOR_SYNTHESIS = ON};
PROPERTY ATMEL {PREASSIGN = KEEP};
PROPERTY ATMEL {CASCADE_LOGIC = OFF};

/* Input Pins */
Pin[30,31,9,8,67,49,48,63,54,46,22,21,44,20,25,6]      = [ABUS0..15];        /* Input bits A */
Pin[64,45,65,70,69,74,77,73,75,76,79,81,80,41,17,40]      = [BBUS0..15];
Pin[84]  = ALU_OE;
Pin[83]  = D_CLK_IN;
Pin[1]   = ALU_FL;  /* active low to save flags on d clock */
Pin[68]      = ALU_WC;        /* active low signal to indicate math should include carry in */
Pin[12,11,10]      = [FUNC0..2];   /* Function Select */
Pin[56] = ALU_CFIN;         /* A carry in for the carry flag to allow for shifts into carry as well as carry invert */
Pin[55] = ALU_CFLATCH;   /* A flag (active low) that forces the carry flag to be set to the ALU_CFIN value on D_CLK_IN */

/* Output Pins */
Pin[58,51,4,50,52,34,33,37,35,24,27,28,16,29,15,18]  = [CBUS0..15];        /* SUM output bits S*/
Pin[60]  = CFOut;
Pin[61]  = OVFOut;
Pin[5]  = ZFOut;

Pin[36] = UNUSED1;
Pin[39] = UNUSED2;
Pin[57] = UNUSED3;
Pin[2] = UNUSED4;

UNUSED1 = UNUSED2 # UNUSED3 # UNUSED4;

/* Internal Nodes */
PINNODE = [C4..10];
PINNODE = [B0..15];

FIELD aluop = [FUNC0..2];
[A0..A15] = [ABUS0..15];

/* Invert the B input bits for SUB functions */
[B0..15] = aluop:['d'0,'d'2,'d'3,'d'4,'d'5,'d'6,'d'7]&[BBUS0..15] # aluop:['d'1]&!([BBUS0..15]);

/* Setup Carry-in for addition or subtraction, and if the with carry flag is active.
   For addition, the carry bit equals 1 to  indicates a carry from the previous op.
   For subtraction, the carry bit equals 0 to indicate a borrow from the previous op.
   This is the opposite of X86 and 68K, but the same as ARM,6502.
   
    */
C0 =   (aluop:['d'2] & CFOut & (!ALU_WC) )       // inst=ADD: if WC==0 Cin=CF else Cin=0
     # (aluop:['d'1] & ( (CFOut) # ALU_WC));    // inst=SUB: if WC==0 Cin=CF else Cin=1

P0 = A0 $ B0;
G0 = A0 & B0;
S0 = P0 $ C0;
C1 = G0;

P1 = A1 $ B1;
G1 = A1 & B1;
S1 = P1 $ C1;
C2 = G1 # (P1&C1);

P2 = A2 $ B2;
G2 = A2 & B2;
S2 = P2 $ C2;
C3 = G2 # (P2&C2);

P3 = A3 $ B3;
G3 = A3 & B3;
S3 = P3 $ C3;
C4 = G3 # (P3&C3);

P4 = A4 $ B4;
G4 = A4 & B4;
S4 = P4 $ C4;
C5 = G4 # (P4&C4);

P5 = A5 $ B5;
G5 = A5 & B5;
S5 = P5 $ C5;
C6 = G5 # (P5&C5);

P6 = A6 $ B6;
G6 = A6 & B6;
S6 = P6 $ C6;
C7 = G6 # (P6&C6);

P7 = A7 $ B7;
G7 = A7 & B7;
S7 = P7 $ C7;
C8 = G7 # (P7&C7);

P8 = A8 $ B8;
G8 = A8 & B8;
S8 = P8 $ C8;
C9 = G8 # (P8&C8);

P9 = A9 $ B9;
G9 = A9 & B9;
S9 = P9 $ C9;
C10 = G9 # (P9&C9);

P10 = A10 $ B10;
G10 = A10 & B10;
S10 = P10 $ C10;
C11 = G10 # (P10&C10);

P11= A11 $ B11;
G11 = A11 & B11;
S11 = P11 $ C11;
C12 = G11 # (P11&C11);

P12 = A12 $ B12;
G12 = A12 & B12;
S12 = P12 $ C12;
C13 = G12 # (P12&C12);

P13 = A13 $ B13;
G13 = A13 & B13;
S13 = P13 $ C13;
C14 = G13 # (P13&C13);

P14 = A14 $ B14;
G14 = A14 & B14;
S14 = P14 $ C14;
C15 = G14 # (P14&C14);

P15 = A15 $ B15;
G15 = A15 & B15;
S15 = P15 $ C15;
C16 = G15 # (P15&C15);

CarryOut = C16;


/*  

    aluop           ALU Operation
    0               OUT = A
    1               OUT = A - B {A + (!B+1)}
    2               OUT = A + B
    3               OUT = A .xor. B
    4               OUT = A .or. B          
    5               OUT = A .and B
    6               OUT = !B
    7               OUT = B

*/


[CBUS0..15] = aluop:['d'0] & ([A0..15]) 
              # aluop:['d'1] & ([S0..15]) 
              # aluop:['d'2] & ([S0..15]) 
              # aluop:['d'3] & ([A0..15] $ [B0..15])
              # aluop:['d'4] & ([A0..15] # [B0..15])
              # aluop:['d'5] & ([A0..15] $ [B0..15])
              # aluop:['d'6] & !([B0..15])
              # aluop:['d'7] & ([B0..15]);

[CBUS0..15].oe = !ALU_OE;

/* Carry flag will be set during ADD and SUB operations, but cleared during AND,OR, XOR, or NOT operations.
   If CFExtLatch is asserted (0), it will override the flag operation and set the flag to the value of 
   ALU_CFIN.  This is used to set the carry flag during shift operations, as well as a complement carry 
   instruction. */

CFOut.d = ( ALU_CFLATCH & ((aluop:['d'1,'d'2] & !ALU_FL & CarryOut) # ( (ALU_FL) & CFOut))) # (!ALU_CFLATCH & ALU_CFIN);
CFOut.ck = D_CLK_IN;

ZeroValue = CBUS0 # CBUS1 # CBUS2 # CBUS3 # CBUS4 # CBUS5 # CBUS6 # CBUS7 # CBUS8 
            # CBUS9 # CBUS10 # CBUS11 # CBUS12 # CBUS13 # CBUS14 # CBUS15;
            
ZFOut.d = (!ALU_FL & (!ZeroValue)) # ( (ALU_FL) & ZFOut);
ZFOut.ck = D_CLK_IN;

/* Overflow is calcualted by XOR of Carry Into the sign bit with the Carry Out of the sign bit.
   The overflow flag is set on ADD or SUB, and cleaed during AND,OR,XOR, NOT operations */

OVFOut.d = (aluop:['d'1,'d'2] & !ALU_FL & (C15 $ C16)) # ( (ALU_FL) & OVFOut);
OVFOut.ck = D_CLK_IN;

/*


Total dedicated input used:	4/4 	(100%)
Total I/O pins used		64/64 	(100%)
Total Logic cells used 		79/128 	(61%)
Total Flip-Flop used 		3/128 	(2%)
Total Foldback logic used 	28/128 	(21%)
Total Nodes+FB/MCells 		93/128 	(72%)
Total cascade used 		14
Total input pins 		48
Total output pins 		20
Total Pts 			303

*/












