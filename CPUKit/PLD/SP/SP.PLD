Name	 SPPTR;
PartNo   SPPTR;
Date     04/18/2022;
Revision 01;
Designer Sponaugle;
Company  Ratiometric;
Assembly None;
Location None;
Device   f1508ispplcc84;
         


PROPERTY ATMEL {TDI_PULLUP = ON};
PROPERTY ATMEL {TMS_PULLUP = ON};
PROPERTY ATMEL {PREASSIGN = KEEP};
PROPERTY ATMEL {XOR_SYNTHESIS = OFF};

/* Input Pins */

Pin[48]  = ADBUS_SP_OE;       /* An active low signal to replicate the SP onto the ADBUS output */
Pin[84]  = BBUS_OE;         /* An active low signal to replicate the SP onto the BBUS output */
Pin[83]  = D_CLK_IN;
Pin[1] = RESET_IN;
Pin[2] = ADBUS_IB_OE;       /* An active low signal to replicate the BBUS input onto the ADBUS output */
Pin[45,44]  = [SP_MODE0..1];

/* Bidirectional Pins */

Pin[24,20,22,21,18,17,15,16,12,10,11,9,6,8,4,5]  = [BBUS0..15];

/* Output Pins */

Pin[52,51,40,41,39,36,37,35,33,34,31,30,29,28,25,27]  = [ADBUS0..15];         
Pin[50] = AD0;              /* Bit 0 of the BBUS used to determine if we are doing a high byte or low byte access */

/* Stuff for IR2 |||||| */
Pin[54,55,57,58,56,61,63,60,64,65,67,73,74,75,77,76] = [DABUS0..15];
Pin[49] = IR2_LATCH;
Pin[46] = IR2_OE;           /* Active low puts IR2 on BBUS */
PINNODE = [IRTWO0..15];

[IRTWO0..15].ck = D_CLK_IN;
[IRTWO0..15].ar = !RESET_IN;
[IRTWO0..15].d = (IR2_LATCH & [IRTWO0..15]) # (!IR2_LATCH & [DABUS0..15]);

/* Stuff for IR2 ^^^^^^  */

/* Internal Nodes */
PINNODE = [SP0..15];
PINNODE = [C2..C15];

[ADBUS0..15].oe = !(ADBUS_SP_OE & ADBUS_IB_OE);
[BBUS0..15].oe = !BBUS_OE # !IR2_OE;

/* Pick the ADBUS output data from either SP or BBUS */
[ADBUS0..15] = ((!ADBUS_SP_OE) & [SP0..15])
                 #  ((!ADBUS_IB_OE) & [BBUS0..15].io);

/* Pick the BBUS output from either SP or IR2 */

[BBUS0..15] = (IR2_OE & [SP0..15]) # ( !IR2_OE & [IRTWO0..15]);

AD0 = BBUS0.io;

FIELD spmode = [SP_MODE0..1];


/* SP Adder/Subtractor Equations

    To Add 1 (SP_MODE1==0), set C1=1, and B1..B15=0
    To Sub 1 (SP_MODE1==1), set C1=0, and B1..B15=1
*/

C1 = !SP_MODE1;
[B1..B15] = SP_MODE1;
[A1..A15] = [SP1..15];

P1 = A1 $ B1;
G1 = A1 & B1;
S1 = P1 $ C1;
C2 = G1 # (P1&C1);

P2 = A2 $ B2;
G2 = A2 & B2;
S2 = P2 $ C2;
C3 = G2 # (P2&C2);

P3 = A3 $ B3;
G3 = A3 & B3;
S3 = P3 $ C3;
C4 = G3 # (P3&C3);

P4 = A4 $ B4;
G4 = A4 & B4;
S4 = P4 $ C4;
C5 = G4 # (P4&C4);

P5 = A5 $ B5;
G5 = A5 & B5;
S5 = P5 $ C5;
C6 = G5 # (P5&C5);

P6 = A6 $ B6;
G6 = A6 & B6;
S6 = P6 $ C6;
C7 = G6 # (P6&C6);

P7 = A7 $ B7;
G7 = A7 & B7;
S7 = P7 $ C7;
C8 = G7 # (P7&C7);

P8 = A8 $ B8;
G8 = A8 & B8;
S8 = P8 $ C8;
C9 = G8 # (P8&C8);

P9 = A9 $ B9;
G9 = A9 & B9;
S9 = P9 $ C9;
C10 = G9 # (P9&C9);

P10 = A10 $ B10;
G10 = A10 & B10;
S10 = P10 $ C10;
C11 = G10 # (P10&C10);

P11= A11 $ B11;
G11 = A11 & B11;
S11 = P11 $ C11;
C12 = G11 # (P11&C11);

P12 = A12 $ B12;
G12 = A12 & B12;
S12 = P12 $ C12;
C13 = G12 # (P12&C12);

P13 = A13 $ B13;
G13 = A13 & B13;
S13 = P13 $ C13;
C14 = G13 # (P13&C13);

P14 = A14 $ B14;
G14 = A14 & B14;
S14 = P14 $ C14;
C15 = G14 # (P14&C14);

P15 = A15 $ B15;
G15 = A15 & B15;
S15 = P15 $ C15;



/* Stack Pointer 

    mode        function
    00          Do Nothing
    01          Add 1
    10          Load
    11          Subtract 1
*/

SP_STAY = spmode:['d'0];
SP_INCDEC  = spmode:['d'1,'d'3];
SP_LOAD = spmode:['d'2];

[SP0..15].ck = D_CLK_IN;
[SP0..15].ar = !RESET_IN;

SP0.d = 'd'0;
SP1.d = ((SP_INCDEC & S1) # (SP_STAY & SP1) # (SP_LOAD & BBUS1.io));
SP2.d = ((SP_INCDEC & S2) # (SP_STAY & SP2) # (SP_LOAD & BBUS2.io));
SP3.d = ((SP_INCDEC & S3) # (SP_STAY & SP3) # (SP_LOAD & BBUS3.io));
SP4.d = ((SP_INCDEC & S4) # (SP_STAY & SP4) # (SP_LOAD & BBUS4.io));
SP5.d = ((SP_INCDEC & S5) # (SP_STAY & SP5) # (SP_LOAD & BBUS5.io));
SP6.d = ((SP_INCDEC & S6) # (SP_STAY & SP6) # (SP_LOAD & BBUS6.io));
SP7.d = ((SP_INCDEC & S7) # (SP_STAY & SP7) # (SP_LOAD & BBUS7.io));
SP8.d = ((SP_INCDEC & S8) # (SP_STAY & SP8) # (SP_LOAD & BBUS8.io));
SP9.d = ((SP_INCDEC & S9) # (SP_STAY & SP9) # (SP_LOAD & BBUS9.io));
SP10.d = ((SP_INCDEC & S10) # (SP_STAY & SP10) # (SP_LOAD & BBUS10.io));
SP11.d = ((SP_INCDEC & S11) # (SP_STAY & SP11) # (SP_LOAD & BBUS11.io));
SP12.d = ((SP_INCDEC & S12) # (SP_STAY & SP12) # (SP_LOAD & BBUS12.io));
SP13.d = ((SP_INCDEC & S13) # (SP_STAY & SP13) # (SP_LOAD & BBUS13.io));
SP14.d = ((SP_INCDEC & S14) # (SP_STAY & SP14) # (SP_LOAD & BBUS14.io));
SP15.d = ((SP_INCDEC & S15) # (SP_STAY & SP15) # (SP_LOAD & BBUS15.io));

/*

Total dedicated input used:	4/4 	(100%)
Total I/O pins used		58/64 	(90%)
Total Logic cells used 		92/128 	(71%)
Total Flip-Flop used 		32/128 	(25%)
Total Foldback logic used 	6/128 	(4%)
Total Nodes+FB/MCells 		98/128 	(76%)
Total cascade used 		0
Total input pins 		29
Total output pins 		33
Total Pts 			275
*/










