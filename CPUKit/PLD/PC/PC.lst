LISTING FOR LOGIC DESCRIPTION FILE: PC.pld                           Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sat Jan 06 21:52:14 2024

  1:Name     PCPTR;
  2:PartNo   PCPTR;
  3:Date     04/18/2022;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1508ispplcc84;
 10:      
 11:
 12:PROPERTY ATMEL {TDI_PULLUP = ON};
 13:PROPERTY ATMEL {TMS_PULLUP = ON};
 14:PROPERTY ATMEL {PREASSIGN = KEEP};
 15:PROPERTY ATMEL {XOR_SYNTHESIS = OFF};
 16:
 17:/*
 18:         Program Counter
 19:
 20:       
 21:
 22:        ADBUS_OE - Active Low enable ADBUS output of current PC (PC_MODE=0XX) or the current PC+BBUS (PC_MODE=1XX)
 23:        BBUS_OE - Active Low enable BBUS output of current PC.
 24:        JMPINST - Active Low indication of a jump instruction.   If this is low, the combination of the input flags (CF, ZF, OV) are combined with the 
 25:                  JCOND0,1,2 input bits to determine if a conditional jump should occur.  If the condition and the flag indicate a jump should happen, 
 26:                  the PC_MODE inputs are adjusted as follows:
 27:
 28:                  If JUMPCONDITION == 0 and JMPINST == 0 (Jump instruction, but don't jump)
 29:                     PC_MODE      PC_MODEJ
 30:                     X00            X00
 31:                     X01            X00
 32:                  If JUMPCONDITION == 1 and JMPINST == 0 (Jump instructio, jump)
 33:                     PC_MODE      PC_MODEJ
 34:                     X00            X10
 35:                     X01            X11
 36:                  If JMPINST == 1
 37:                     PC_MODE      PC_MODEJ
 38:                     X00            X00
 39:                     X01            X01
 40:
 41:                  The modified PC_MODEJ is used to determine what happens to the internal PC register.   
 42:
 43:                   PC_MODEJ Inputs  2/1/0 (3 bits)
 44:                     000          Do Nothing
 45:                     001          Increment PC Register by 2 (bit 0 is always 0)  [FETCH]
 46:                     010          Load PC Register from BBUS [JMP DIRECT, CALL DIRECT]
 47:                     011          Add to PC Register from BBUS (Relative Jump), ignore bit 0 from BBUS, latch back into PC. [JMP RELATIVE, CALL RELATIVE]
 48:                     100          Add PC Register Value to BBUS and output on AD immediatly, but don't latch back into the PC register
 49:
 50:        Changes to PC happen on D_CLK_IN rising edge.
 51:
 52:
 53:*/

LISTING FOR LOGIC DESCRIPTION FILE: PC.pld                           Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sat Jan 06 21:52:14 2024

 54:
 55:
 56:/* Input Pins */
 57:
 58:Pin[44,45,46]  = [PC_MODE0..2];
 59:Pin[2]  = ADBUS_OE;
 60:Pin[84]  = BBUS_OE;
 61:Pin[83]  = D_CLK_IN;
 62:Pin[1]  = RESET_IN;
 63:Pin[55] = CF_IN;
 64:Pin[57] = OVF_IN;
 65:Pin[56] = ZF_IN;
 66:Pin[60,61,63] = [JCOND0..2];
 67:Pin[58] = JMPINST;     /* Active Low input to indicate a jump instruction is executing */
 68:
 69:/* Output Pins */
 70:
 71:Pin[41,39,40,37,36,35,33,34,31,29,30,28,27,25,24]  = [ADBUS1..15];   
 72:
 73:/* Bidirectional Pins */
 74:
 75:Pin[50,20,22,21,18,17,15,16,12,11,10,8,9,6,5,4]  = [BBUS0..15];
 76:
 77:
 78:Pin[48] = UNUSED1;
 79:Pin[49] = UNUSED2;    
 80:Pin[51] = UNUSED4;
 81:Pin[52] = UNUSED5;
 82:Pin[54] = UNUSED6;
 83:Pin[64] = UNUSED7;
 84:Pin[65] = UNUSED8;
 85:Pin[67] = UNUSED9;
 86:Pin[68] = UNUSED10;
 87:Pin[69] = UNUSED11;
 88:Pin[70] = UNUSED12;
 89:Pin[73] = UNUSED13;
 90:Pin[74] = UNUSED14;
 91:Pin[75] = UNUSED15;
 92:Pin[76] = UNUSED16;
 93:Pin[77] = UNUSED17;
 94:Pin[79] = UNUSED18;
 95:Pin[80] = UNUSED19;
 96:Pin[81] = UNUSED20;
 97:
 98:UNUSED1 = UNUSED12 # UNUSED4 # UNUSED5 # UNUSED6 & (UNUSED7 # UNUSED8 # UNUSED9 # UNUSED10 # UNUSED11);
 99:UNUSED2 = UNUSED13 # UNUSED14 # UNUSED15 # UNUSED16 & (UNUSED17 # UNUSED18 # UNUSED19 # UNUSED20);
100:
101:PINNODE [0..0] = [PC1..15];       /* The actual program counter register, 16 bits wide */
102:PINNODE [0..0] = [C2..15];
103:PINNODE [0..0] = [S1..15];
104:
105:[ADBUS1..15].oe = !ADBUS_OE;
106:[BBUS1..15].oe = !BBUS_OE;
107:

LISTING FOR LOGIC DESCRIPTION FILE: PC.pld                           Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sat Jan 06 21:52:14 2024

108:/* The ADBUS output can be either the curent PC value, or the output from the internal adder. */
109:
110:[ADBUS1..15] = ((!PC_MODE2) & [PC1..15]) 
111:                # (PC_MODE2 & [S1..15]);
112:
113:[BBUS1..15] = [PC1..15];
114:BBUS0 = 'b'0;
115:
116:/* 
117:  Handle Jump conditions.  
118:  If JMPINST == 0, that indicates we are doing a jump instruction and we need to compare the flags based
119:  on the jump condition, and if a jump should occur force PC_MODE1 high.
120:
121:  Jump Condition Code               Condition
122:  000                               Always Jump
123:  001                               Jump if ZF==1
124:  010                               Jump if ZF==0
125:  011                               Jump if CF==1
126:  100                               Jump if CF==0
127:  101                               Jump if OVF==1
128:  110                               Jump if OVF==0
129:  111                               Always Jump
130:
131:*/
132:
133:FIELD jumpc = [JCOND0..2];
134:
135:JUMPCONDITION =( ( jumpc:['b'000] )
136:            # ( jumpc:['b'001] & ZF_IN )
137:            # ( jumpc:['b'010] & !ZF_IN )
138:            # ( jumpc:['b'011] & CF_IN )
139:            # ( jumpc:['b'100] & !CF_IN )
140:            # ( jumpc:['b'101] & OVF_IN )
141:            # ( jumpc:['b'110] & !OVF_IN )
142:            # ( jumpc:['b'111]));
143:
144:/* Let's fix up PC_MODE by creating PC_MODEJ, which as the addition of the jump modification. */
145:
146://PINNODE  0  = PC_MODEJ1,PC_MODEJ0;

147:PC_MODEJ0 = PC_MODE0 & (JMPINST # JUMPCONDITION);
148:PC_MODEJ1 = PC_MODE1 # (!JMPINST & JUMPCONDITION);
149:PC_MODEJ2 = PC_MODE2;
150:FIELD pcmode = [PC_MODEJ0..2];
151:
152:
153:/* PC Adder/Subtractor Equations
154:
155:   PC_MODEJ       C1       A           B        Function
156:   -----------------------------------------------------------------
157:   000            0        PC          0        Do nothing (PC=PC)
158:   001            1        PC          0        Add one to PC (PC = PC +1)
159:   010            0        PC          BBUS     Load PC from BBUS (the output of the adder is not used)
160:   011            0        PC          BBUS     Add BBUS to PC (PC will latch in new value)
161:   1XX            0        PC          BBUS     Add BBUS to PC (PC will not latch in new value, but the added value can be driven on ADBUS)

LISTING FOR LOGIC DESCRIPTION FILE: PC.pld                           Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sat Jan 06 21:52:14 2024

162:
163:    To Add 1 (PC_MODE==001), set C1=1, and B1..B15=0
164:    To Add Offset (PC_MODE=011 or PC_MODE=100), set C0=0, and B0..B15=BBUS0..BBUS15
165:    PC must always have bit0=0, so on load we will not load bit 0, but on output
166:    we will output a zero.
167:
168:    When we add a offset from BBUS to PC BBUS bit 0 is ignored.
169:
170:*/
171:
172:C1 = (PC_MODEJ0 & !PC_MODEJ1 & !PC_MODEJ2);  // if PC_MODE = 001, set carry in to 1, otherwise 0

173:/* 
174:   For the [B1..B15], we want the [B] field to be the BBUS value if we are in PC_MODE 010,011, or 1XX. 
175:   IF PC_MODE is 000 or 001 the [B] field is 0.
176:
177:   Note that for PC_MODE 010 the result of the addition will not be used, but including that simplifies 
178:   the logic.
179:   */
180:
181:[B1..B15] = ((PC_MODEJ1#PC_MODEJ2) & [BBUS1..BBUS15].io);
182:[A1..A15] = [PC1..PC15];
183:
184:P1 = A1 $ B1;
185:G1 = A1 & B1;
186:S1 = P1 $ C1;
187:C2 = G1 # (P1&C1);
188:
189:P2 = A2 $ B2;
190:G2 = A2 & B2;
191:S2 = P2 $ C2;
192:C3 = G2 # (P2&C2);
193:
194:P3 = A3 $ B3;
195:G3 = A3 & B3;
196:S3 = P3 $ C3;
197:C4 = G3 # (P3&C3);
198:
199:P4 = A4 $ B4;
200:G4 = A4 & B4;
201:S4 = P4 $ C4;
202:C5 = G4 # (P4&C4);
203:
204:P5 = A5 $ B5;
205:G5 = A5 & B5;
206:S5 = P5 $ C5;
207:C6 = G5 # (P5&C5);
208:
209:P6 = A6 $ B6;
210:G6 = A6 & B6;
211:S6 = P6 $ C6;
212:C7 = G6 # (P6&C6);
213:
214:P7 = A7 $ B7;
215:G7 = A7 & B7;

LISTING FOR LOGIC DESCRIPTION FILE: PC.pld                           Page 5

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sat Jan 06 21:52:14 2024

216:S7 = P7 $ C7;
217:C8 = G7 # (P7&C7);
218:
219:P8 = A8 $ B8;
220:G8 = A8 & B8;
221:S8 = P8 $ C8;
222:C9 = G8 # (P8&C8);
223:
224:P9 = A9 $ B9;
225:G9 = A9 & B9;
226:S9 = P9 $ C9;
227:C10 = G9 # (P9&C9);
228:
229:P10 = A10 $ B10;
230:G10 = A10 & B10;
231:S10 = P10 $ C10;
232:C11 = G10 # (P10&C10);
233:
234:P11= A11 $ B11;
235:G11 = A11 & B11;
236:S11 = P11 $ C11;
237:C12 = G11 # (P11&C11);
238:
239:P12 = A12 $ B12;
240:G12 = A12 & B12;
241:S12 = P12 $ C12;
242:C13 = G12 # (P12&C12);
243:
244:P13 = A13 $ B13;
245:G13 = A13 & B13;
246:S13 = P13 $ C13;
247:C14 = G13 # (P13&C13);
248:
249:P14 = A14 $ B14;
250:G14 = A14 & B14;
251:S14 = P14 $ C14;
252:C15 = G14 # (P14&C14);
253:
254:P15 = A15 $ B15;
255:G15 = A15 & B15;
256:S15 = P15 $ C15;
257:
258:
259:
260:
261:
262:/* Program Counter 
263:   bit 0 is always 0 in the program counter, so bit0 is never loaded, but always output
264:*/
265:
266:PC_STAY = pcmode:['b'X00];
267:PC_ADD  = pcmode:['b'001,'b'011];
268:PC_LOAD = pcmode:['b'010];
269:

LISTING FOR LOGIC DESCRIPTION FILE: PC.pld                           Page 6

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sat Jan 06 21:52:14 2024

270:PC1.d = ((PC_ADD & S1) # (PC_STAY & PC1) # (PC_LOAD & BBUS1.io));
271:PC1.ck = D_CLK_IN;
272:PC1.ar = !RESET_IN;
273:
274:PC2.d = ((PC_ADD & S2) # (PC_STAY & PC2) # (PC_LOAD & BBUS2.io));
275:PC2.ck = D_CLK_IN;
276:PC2.ar = !RESET_IN;
277:
278:PC3.d = ((PC_ADD & S3) # (PC_STAY & PC3) # (PC_LOAD & BBUS3.io));
279:PC3.ck = D_CLK_IN;
280:PC3.ar = !RESET_IN;
281:
282:PC4.d = ((PC_ADD & S4) # (PC_STAY & PC4) # (PC_LOAD & BBUS4.io));
283:PC4.ck = D_CLK_IN;
284:PC4.ar = !RESET_IN;
285:
286:PC5.d = ((PC_ADD & S5) # (PC_STAY & PC5) # (PC_LOAD & BBUS5.io));
287:PC5.ck = D_CLK_IN;
288:PC5.ar = !RESET_IN;
289:
290:PC6.d = ((PC_ADD & S6) # (PC_STAY & PC6) # (PC_LOAD & BBUS6.io));
291:PC6.ck = D_CLK_IN;
292:PC6.ar = !RESET_IN;
293:
294:PC7.d = ((PC_ADD & S7) # (PC_STAY & PC7) # (PC_LOAD & BBUS7.io));
295:PC7.ck = D_CLK_IN;
296:PC7.ar = !RESET_IN;
297:
298:PC8.d = ((PC_ADD & S8) # (PC_STAY & PC8) # (PC_LOAD & BBUS8.io));
299:PC8.ck = D_CLK_IN;
300:PC8.ar = !RESET_IN;
301:
302:PC9.d = ((PC_ADD & S9) # (PC_STAY & PC9) # (PC_LOAD & BBUS9.io));
303:PC9.ck = D_CLK_IN;
304:PC9.ar = !RESET_IN;
305:
306:PC10.d = ((PC_ADD & S10) # (PC_STAY & PC10) # (PC_LOAD & BBUS10.io));
307:PC10.ck = D_CLK_IN;
308:PC10.ar = !RESET_IN;
309:
310:PC11.d = ((PC_ADD & S11) # (PC_STAY & PC11) # (PC_LOAD & BBUS11.io));
311:PC11.ck = D_CLK_IN;
312:PC11.ar = !RESET_IN;
313:
314:PC12.d = ((PC_ADD & S12) # (PC_STAY & PC12) # (PC_LOAD & BBUS12.io));
315:PC12.ck = D_CLK_IN;
316:PC12.ar = !RESET_IN;
317:
318:PC13.d = ((PC_ADD & S13) # (PC_STAY & PC13) # (PC_LOAD & BBUS13.io));
319:PC13.ck = D_CLK_IN;
320:PC13.ar = !RESET_IN;
321:
322:PC14.d = ((PC_ADD & S14) # (PC_STAY & PC14) # (PC_LOAD & BBUS14.io));
323:PC14.ck = D_CLK_IN;

LISTING FOR LOGIC DESCRIPTION FILE: PC.pld                           Page 7

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sat Jan 06 21:52:14 2024

324:PC14.ar = !RESET_IN;
325:
326:PC15.d = ((PC_ADD & S15) # (PC_STAY & PC15) # (PC_LOAD & BBUS15.io));
327:PC15.ck = D_CLK_IN;
328:PC15.ar = !RESET_IN;
329:
330:
331:
332:/*
333:Total dedicated input used:     4/4     (100%)
334:Total I/O pins used             64/64   (100%)
335:Total Logic cells used          99/128  (77%)
336:Total Flip-Flop used            16/128  (12%)
337:Total Foldback logic used       7/128   (5%)
338:Total Nodes+FB/MCells           105/128         (82%)
339:Total cascade used              1
340:Total input pins                36
341:Total output pins               32
342:Total Pts                       240
343:*/
344:
345:
346:
347:
348:
349:
350:
351:
352:
353:
354:
355:



