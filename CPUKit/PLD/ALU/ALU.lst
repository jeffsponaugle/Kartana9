LISTING FOR LOGIC DESCRIPTION FILE: ALU.pld                          Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Dec 31 14:27:55 2023

  1:Name     ALU;
  2:PartNo   ALU;
  3:Date     12/12/2023;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1508ispplcc84;
 10:
 11:PROPERTY ATMEL {TDI_PULLUP = ON};
 12:PROPERTY ATMEL {TMS_PULLUP = ON};
 13:PROPERTY ATMEL {XOR_SYNTHESIS = ON};
 14:PROPERTY ATMEL {PREASSIGN = KEEP};
 15:PROPERTY ATMEL {CASCADE_LOGIC = OFF};
 16:
 17:/* Input Pins */
 18:Pin[30,31,9,8,67,49,48,63,54,46,22,21,44,20,25,6]      = [ABUS0..15];        /* Input bits A */
 19:Pin[64,45,65,70,69,74,77,73,75,76,79,81,80,41,17,40]      = [BBUS0..15];
 20:Pin[84]  = ALU_OE;
 21:Pin[83]  = D_CLK_IN;
 22:Pin[1]   = ALU_FL;  /* active low to save flags on d clock */
 23:Pin[68]      = ALU_WC;        /* active low signal to indicate math should include carry in */
 24:Pin[12,11,10]      = [FUNC0..2];   /* Function Select */
 25:Pin[56] = ALU_CFIN;         /* A carry in for the carry flag to allow for shifts into carry as well as carry invert */
 26:Pin[55] = ALU_CFLATCH;   /* A flag (active low) that forces the carry flag to be set to the ALU_CFIN value on D_CLK_IN */
 27:
 28:/* Output Pins */
 29:Pin[58,51,4,50,52,34,33,37,35,24,27,28,16,29,15,18]  = [CBUS0..15];        /* SUM output bits S*/
 30:Pin[60]  = CFOut;
 31:Pin[61]  = OVFOut;
 32:Pin[5]  = ZFOut;
 33:
 34:Pin[36] = UNUSED1;
 35:Pin[39] = UNUSED2;
 36:Pin[57] = UNUSED3;
 37:Pin[2] = UNUSED4;
 38:
 39:UNUSED1 = UNUSED2 # UNUSED3 # UNUSED4;
 40:
 41:/* Internal Nodes */
 42:PINNODE [0..0] = [C4..10];
 43:PINNODE [0..0] = [B0..15];
 44:
 45:FIELD aluop = [FUNC0..2];
 46:[A0..A15] = [ABUS0..15];
 47:
 48:/* Invert the B input bits for SUB functions */
 49:[B0..15] = aluop:['d'0,'d'2,'d'3,'d'4,'d'5,'d'6,'d'7]&[BBUS0..15] # aluop:['d'1]&!([BBUS0..15]);
 50:
 51:/* Setup Carry-in for addition or subtraction, and if the with carry flag is active. */
 52:C0 =   (aluop:['d'2] & CFOut & (!ALU_WC) )       // inst=ADD: if WC==0 Cin=CF else Cin=0

 53:     # (aluop:['d'1] & ( (!CFOut) # ALU_WC));    // inst=SUB: if WC==0 Cin=!CF else Cin=1


LISTING FOR LOGIC DESCRIPTION FILE: ALU.pld                          Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Dec 31 14:27:55 2023

 54:
 55:P0 = A0 $ B0;
 56:G0 = A0 & B0;
 57:S0 = P0 $ C0;
 58:C1 = G0;
 59:
 60:P1 = A1 $ B1;
 61:G1 = A1 & B1;
 62:S1 = P1 $ C1;
 63:C2 = G1 # (P1&C1);
 64:
 65:P2 = A2 $ B2;
 66:G2 = A2 & B2;
 67:S2 = P2 $ C2;
 68:C3 = G2 # (P2&C2);
 69:
 70:P3 = A3 $ B3;
 71:G3 = A3 & B3;
 72:S3 = P3 $ C3;
 73:C4 = G3 # (P3&C3);
 74:
 75:P4 = A4 $ B4;
 76:G4 = A4 & B4;
 77:S4 = P4 $ C4;
 78:C5 = G4 # (P4&C4);
 79:
 80:P5 = A5 $ B5;
 81:G5 = A5 & B5;
 82:S5 = P5 $ C5;
 83:C6 = G5 # (P5&C5);
 84:
 85:P6 = A6 $ B6;
 86:G6 = A6 & B6;
 87:S6 = P6 $ C6;
 88:C7 = G6 # (P6&C6);
 89:
 90:P7 = A7 $ B7;
 91:G7 = A7 & B7;
 92:S7 = P7 $ C7;
 93:C8 = G7 # (P7&C7);
 94:
 95:P8 = A8 $ B8;
 96:G8 = A8 & B8;
 97:S8 = P8 $ C8;
 98:C9 = G8 # (P8&C8);
 99:
100:P9 = A9 $ B9;
101:G9 = A9 & B9;
102:S9 = P9 $ C9;
103:C10 = G9 # (P9&C9);
104:
105:P10 = A10 $ B10;
106:G10 = A10 & B10;
107:S10 = P10 $ C10;

LISTING FOR LOGIC DESCRIPTION FILE: ALU.pld                          Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Dec 31 14:27:55 2023

108:C11 = G10 # (P10&C10);
109:
110:P11= A11 $ B11;
111:G11 = A11 & B11;
112:S11 = P11 $ C11;
113:C12 = G11 # (P11&C11);
114:
115:P12 = A12 $ B12;
116:G12 = A12 & B12;
117:S12 = P12 $ C12;
118:C13 = G12 # (P12&C12);
119:
120:P13 = A13 $ B13;
121:G13 = A13 & B13;
122:S13 = P13 $ C13;
123:C14 = G13 # (P13&C13);
124:
125:P14 = A14 $ B14;
126:G14 = A14 & B14;
127:S14 = P14 $ C14;
128:C15 = G14 # (P14&C14);
129:
130:P15 = A15 $ B15;
131:G15 = A15 & B15;
132:S15 = P15 $ C15;
133:C16 = G15 # (P15&C15);
134:
135:CarryOut = C16;
136:
137:
138:/*  
139:
140:    aluop           ALU Operation
141:    0               OUT = A
142:    1               OUT = A - B {A + (!B+1)}
143:    2               OUT = A + B
144:    3               OUT = A .xor. B
145:    4               OUT = A .or. B          
146:    5               OUT = A .and B
147:    6               OUT = !B
148:    7               OUT = B
149:
150:*/
151:
152:
153:[CBUS0..15] = aluop:['d'0] & ([A0..15]) 
154:              # aluop:['d'1] & ([S0..15]) 
155:              # aluop:['d'2] & ([S0..15]) 
156:              # aluop:['d'3] & ([A0..15] $ [B0..15])
157:              # aluop:['d'4] & ([A0..15] # [B0..15])
158:              # aluop:['d'5] & ([A0..15] $ [B0..15])
159:              # aluop:['d'6] & !([B0..15])
160:              # aluop:['d'7] & ([B0..15]);
161:

LISTING FOR LOGIC DESCRIPTION FILE: ALU.pld                          Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Dec 31 14:27:55 2023

162:[CBUS0..15].oe = !ALU_OE;
163:
164:/* Carry flag will be set during ADD and SUB operations, but cleared during AND,OR, XOR, or NOT operations.
165:   If CFExtLatch is asserted (0), it will override the flag operation and set the flag to the value of 
166:   ALU_CFIN.  This is used to set the carry flag during shift operations, as well as a complement carry 
167:   instruction. */
168:
169:CFOut.d = ( ALU_CFLATCH & ((aluop:['d'1,'d'2] & !ALU_FL & CarryOut) # ( (ALU_FL) & CFOut))) # (!ALU_CFLATCH & ALU_CFIN);
170:CFOut.ck = D_CLK_IN;
171:
172:ZeroValue = CBUS0 # CBUS1 # CBUS2 # CBUS3 # CBUS4 # CBUS5 # CBUS6 # CBUS7 # CBUS8 
173:            # CBUS9 # CBUS10 # CBUS11 # CBUS12 # CBUS13 # CBUS14 # CBUS15;
174:            
175:ZFOut.d = (!ALU_FL & (!ZeroValue)) # ( (ALU_FL) & ZFOut);
176:ZFOut.ck = D_CLK_IN;
177:
178:/* Overflow is calcualted by XOR of Carry Into the sign bit with the Carry Out of the sign bit.
179:   The overflow flag is set on ADD or SUB, and cleaed during AND,OR,XOR, NOT operations */
180:
181:OVFOut.d = (aluop:['d'1,'d'2] & !ALU_FL & (C15 $ C16)) # ( (ALU_FL) & OVFOut);
182:OVFOut.ck = D_CLK_IN;
183:
184:/*
185:
186:
187:Total dedicated input used:     3/4     (75%)
188:Total I/O pins used             61/64   (95%)
189:Total Logic cells used          78/128  (60%)
190:Total Flip-Flop used            3/128   (2%)
191:Total Foldback logic used       28/128  (21%)
192:Total Nodes+FB/MCells           92/128  (71%)
193:Total cascade used              14
194:Total input pins                45
195:Total output pins               19
196:Total Pts                       302
197:
198:*/
199:
200:
201:
202:
203:
204:
205:
206:
207:
208:
209:
210:
211:
212:



