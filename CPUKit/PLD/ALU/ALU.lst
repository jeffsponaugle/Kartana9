LISTING FOR LOGIC DESCRIPTION FILE: ALU.pld                          Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Dec 29 16:18:54 2023

  1:Name     ALU;
  2:PartNo   ALU;
  3:Date     12/12/2023;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1508ispplcc84;
 10:
 11:PROPERTY ATMEL {TDI_PULLUP = ON};
 12:PROPERTY ATMEL {TMS_PULLUP = ON};
 13:PROPERTY ATMEL {XOR_SYNTHESIS = ON};
 14:PROPERTY ATMEL {PREASSIGN = KEEP};
 15:PROPERTY ATMEL {CASCADE_LOGIC = OFF};
 16:
 17:/* Input Pins */
 18:Pin[30,31,9,8,67,49,48,63,54,46,22,21,44,20,25,6]      = [ABUS0..15];        /* Input bits A */
 19:Pin[64,45,65,70,69,74,77,73,75,76,79,81,80,41,17,40]      = [BBUS0..15];
 20:Pin[84]  = ALU_OE;
 21:Pin[83]  = D_CLK_IN;
 22:Pin[1]   = ALU_FL;  /* active low to save flags on d clock */
 23:Pin[68]      = ALU_WC;        /* active low signal to indicate math should include carry in */
 24:Pin[12,11,10]      = [FUNC0..2];   /* Function Select */
 25:Pin[56] = ALU_CFIN;         /* A carry in for the carry flag to allow for shifts into carry as well as carry invert */
 26:Pin[55] = ALU_CFLATCH;   /* A flag (active low) that forces the carry flag to be set to the ALU_CFIN value on D_CLK_IN */
 27:
 28:/* Output Pins */
 29:Pin[58,51,4,50,52,34,33,37,35,24,27,28,16,29,15,18]  = [CBUS0..15];        /* SUM output bits S*/
 30:Pin[60]  = CFOut;
 31:Pin[61]  = OVFOut;
 32:Pin[5]  = ZFOut;
 33:
 34:
 35:/* Internal Nodes */
 36:PINNODE [0..0] = [C4..10];
 37:PINNODE [0..0] = [B0..15];
 38:
 39:FIELD aluop = [FUNC0..2];
 40:[A0..A15] = [ABUS0..15];
 41:
 42:/* Invert the B input bits for SUB functions */
 43:[B0..15] = aluop:['d'0,'d'2,'d'3,'d'4,'d'5,'d'6,'d'7]&[BBUS0..15] # aluop:['d'1]&!([BBUS0..15]);
 44:
 45:/* Setup Carry-in for addition or subtraction, and if the with carry flag is active. */
 46:C0 =   (aluop:['d'2] & CFOut & (!ALU_WC) )       // inst=ADD: if WC==0 Cin=CF else Cin=0

 47:     # (aluop:['d'1] & ( (!CFOut) # ALU_WC));    // inst=SUB: if WC==0 Cin=!CF else Cin=1

 48:
 49:P0 = A0 $ B0;
 50:G0 = A0 & B0;
 51:S0 = P0 $ C0;
 52:C1 = G0;
 53:

LISTING FOR LOGIC DESCRIPTION FILE: ALU.pld                          Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Dec 29 16:18:54 2023

 54:P1 = A1 $ B1;
 55:G1 = A1 & B1;
 56:S1 = P1 $ C1;
 57:C2 = G1 # (P1&C1);
 58:
 59:P2 = A2 $ B2;
 60:G2 = A2 & B2;
 61:S2 = P2 $ C2;
 62:C3 = G2 # (P2&C2);
 63:
 64:P3 = A3 $ B3;
 65:G3 = A3 & B3;
 66:S3 = P3 $ C3;
 67:C4 = G3 # (P3&C3);
 68:
 69:P4 = A4 $ B4;
 70:G4 = A4 & B4;
 71:S4 = P4 $ C4;
 72:C5 = G4 # (P4&C4);
 73:
 74:P5 = A5 $ B5;
 75:G5 = A5 & B5;
 76:S5 = P5 $ C5;
 77:C6 = G5 # (P5&C5);
 78:
 79:P6 = A6 $ B6;
 80:G6 = A6 & B6;
 81:S6 = P6 $ C6;
 82:C7 = G6 # (P6&C6);
 83:
 84:P7 = A7 $ B7;
 85:G7 = A7 & B7;
 86:S7 = P7 $ C7;
 87:C8 = G7 # (P7&C7);
 88:
 89:P8 = A8 $ B8;
 90:G8 = A8 & B8;
 91:S8 = P8 $ C8;
 92:C9 = G8 # (P8&C8);
 93:
 94:P9 = A9 $ B9;
 95:G9 = A9 & B9;
 96:S9 = P9 $ C9;
 97:C10 = G9 # (P9&C9);
 98:
 99:P10 = A10 $ B10;
100:G10 = A10 & B10;
101:S10 = P10 $ C10;
102:C11 = G10 # (P10&C10);
103:
104:P11= A11 $ B11;
105:G11 = A11 & B11;
106:S11 = P11 $ C11;
107:C12 = G11 # (P11&C11);

LISTING FOR LOGIC DESCRIPTION FILE: ALU.pld                          Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Dec 29 16:18:54 2023

108:
109:P12 = A12 $ B12;
110:G12 = A12 & B12;
111:S12 = P12 $ C12;
112:C13 = G12 # (P12&C12);
113:
114:P13 = A13 $ B13;
115:G13 = A13 & B13;
116:S13 = P13 $ C13;
117:C14 = G13 # (P13&C13);
118:
119:P14 = A14 $ B14;
120:G14 = A14 & B14;
121:S14 = P14 $ C14;
122:C15 = G14 # (P14&C14);
123:
124:P15 = A15 $ B15;
125:G15 = A15 & B15;
126:S15 = P15 $ C15;
127:C16 = G15 # (P15&C15);
128:
129:CarryOut = C16;
130:
131:
132:/*  
133:
134:    aluop           ALU Operation
135:    0               OUT = A
136:    1               OUT = A - B {A + (!B+1)}
137:    2               OUT = A + B
138:    3               OUT = A .xor. B
139:    4               OUT = A .or. B          
140:    5               OUT = A .and B
141:    6               OUT = !B
142:    7               OUT = B
143:
144:*/
145:
146:
147:[CBUS0..15] = aluop:['d'0] & ([A0..15]) 
148:              # aluop:['d'1] & ([S0..15]) 
149:              # aluop:['d'2] & ([S0..15]) 
150:              # aluop:['d'3] & ([A0..15] $ [B0..15])
151:              # aluop:['d'4] & ([A0..15] # [B0..15])
152:              # aluop:['d'5] & ([A0..15] $ [B0..15])
153:              # aluop:['d'6] & !([B0..15])
154:              # aluop:['d'7] & ([B0..15]);
155:
156:[CBUS0..15].oe = !ALU_OE;
157:
158:/* Carry flag will be set during ADD and SUB operations, but cleared during AND,OR, XOR, or NOT operations.
159:   If CFExtLatch is asserted (0), it will override the flag operation and set the flag to the value of 
160:   ALU_CFIN.  This is used to set the carry flag during shift operations, as well as a complement carry 
161:   instruction. */

LISTING FOR LOGIC DESCRIPTION FILE: ALU.pld                          Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Dec 29 16:18:54 2023

162:
163:CFOut.d = ( ALU_CFLATCH & ((aluop:['d'1,'d'2] & !ALU_FL & CarryOut) # ( (ALU_FL) & CFOut))) # (!ALU_CFLATCH & ALU_CFIN);
164:CFOut.ck = D_CLK_IN;
165:
166:ZeroValue = CBUS0 # CBUS1 # CBUS2 # CBUS3 # CBUS4 # CBUS5 # CBUS6 # CBUS7 # CBUS8 
167:            # CBUS9 # CBUS10 # CBUS11 # CBUS12 # CBUS13 # CBUS14 # CBUS15;
168:            
169:ZFOut.d = (!ALU_FL & (!ZeroValue)) # ( (ALU_FL) & ZFOut);
170:ZFOut.ck = D_CLK_IN;
171:
172:/* Overflow is calcualted by XOR of Carry Into the sign bit with the Carry Out of the sign bit.
173:   The overflow flag is set on ADD or SUB, and cleaed during AND,OR,XOR, NOT operations */
174:
175:OVFOut.d = (aluop:['d'1,'d'2] & !ALU_FL & (C15 $ C16)) # ( (ALU_FL) & OVFOut);
176:OVFOut.ck = D_CLK_IN;
177:
178:/*
179:
180:Total dedicated input used:     3/4     (75%)
181:Total I/O pins used             59/64   (92%)
182:Total Logic cells used          80/128  (62%)
183:Total Flip-Flop used            3/128   (2%)
184:Total Foldback logic used       25/128  (19%)
185:Total Nodes+FB/MCells           93/128  (72%)
186:Total cascade used              12
187:Total input pins                43
188:Total output pins               19
189:Total Pts                       301
190:
191:*/
192:
193:
194:
195:
196:
197:
198:
199:
200:
201:
202:
203:
204:
205:



