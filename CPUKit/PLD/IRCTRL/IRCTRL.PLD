Name     IRCTRL;
PartNo   IRCTRL;
Date     04/18/2022;
Revision 01;
Designer Sponaugle;
Company  Ratiometric;
Assembly None;
Location None;
Device   f1508ispplcc84;

PROPERTY ATMEL {TDI_PULLUP = ON};
PROPERTY ATMEL {TMS_PULLUP = ON};
PROPERTY ATMEL {PREASSIGN = KEEP};

/* All of the instructions as $DEFINES in the format needed for signal generation */

$DEFINE INST_NOP (SM_EX1 & opcf:['b'0000000])
$DEFINE INST_HALT (SM_EX1 & opcf:['b'0000001])
$DEFINE INST_SUB_A_B_C (SM_EX1 & opcf:['b'0000010])
$DEFINE INST_SUBC_A_B_C (SM_EX1 & opcf:['b'0000011])
$DEFINE INST_ADD_A_B_C (SM_EX1 & opcf:['b'0000100])
$DEFINE INST_ADDC_A_B_B (SM_EX1 & opcf:['b'0000101])
$DEFINE INST_XOR_A_B_C (SM_EX1 & opcf:['b'0000110])
$DEFINE INST_OR_A_B_C (SM_EX1 & opcf:['b'0001000])
$DEFINE INST_AND_A_B_C (SM_EX1 & opcf:['b'0001010])
$DEFINE INST_NOT_B_C (SM_EX1 & opcf:['b'0001100])
$DEFINE INST_STOREW_A_INDB (SM_EX1 & opcf:['b'0010000])
$DEFINE INST_STOREB_A_INDB (SM_EX1 & opcf:['b'0010001])
$DEFINE INST_CMP_A_B (SM_EX1 & opcf:['b'0010010])
$DEFINE INST_CMPC (SM_EX1 & opcf:['b'0010011])
$DEFINE INST_LOADW_INDB_C (SM_EX1 & opcf:['b'0010100])
$DEFINE INST_LOADB_INDB_C (SM_EX1 & opcf:['b'0010101])
$DEFINE INST_JMP_INDB (SM_EX1 & opcf:['b'0011000])
$DEFINE INST_JZ_INDB (SM_EX1 & opcf:['b'0011001])
$DEFINE INST_JNZ_INDB (SM_EX1 & opcf:['b'0011010])
$DEFINE INST_JC_INDB (SM_EX1 & opcf:['b'0011011])
$DEFINE INST_JNC_INDB (SM_EX1 & opcf:['b'0011100])
$DEFINE INST_JV_INDB (SM_EX1 & opcf:['b'0011101])
$DEFINE INST_JNV_INDB (SM_EX1 & opcf:['b'0011110])
$DEFINE INST_SHL_B_C_CNT (SM_EX1 & opcf:['b'0100010])
$DEFINE INST_SHR_B_C_CNT (SM_EX1 & opcf:['b'0100011])
$DEFINE INST_SHLC_B_C_CNT (SM_EX1 & opcf:['b'0100100])
$DEFINE INST_SHRA_B_C_CNT (SM_EX1 & opcf:['b'0100101])
$DEFINE INST_MOV_SP_C (SM_EX1 & opcf:['b'0101010])
$DEFINE INST_MOV_B_SP (SM_EX1 & opcf:['b'0101011])
$DEFINE INST_MOV_B_C (SM_EX1 & opcf:['b'0101100])
$DEFINE INST_MOV_PC_C (SM_EX1 & opcf:['b'0101101])
$DEFINE INST_PUSH_B (SM_EX1 & opcf:['b'0101110])
$DEFINE INST_POP_C (SM_EX1 & opcf:['b'0110000])
$DEFINE INST_POP_C_2 (SM_EX2 & opcf:['b'0110000])
$DEFINE INST_CALL_B (SM_EX1 & opcf:['b'0110100])
$DEFINE INST_CALL_B_2 (SM_EX2 & opcf:['b'0110100])
$DEFINE INST_CALL_INDB (SM_EX1 & opcf:['b'0110110])
$DEFINE INST_CALL_INDB_2 (SM_EX2 & opcf:['b'0110110])
$DEFINE INST_RET (SM_EX1 & opcf:['b'0111000])
$DEFINE INST_RET_2 (SM_EX2 & opcf:['b'0111000])
$DEFINE INST_SUB_A_I16_C (SM_EX1 & opcf:['b'1000010])
$DEFINE INST_SUBC_A_I16_C (SM_EX1 & opcf:['b'1000011])
$DEFINE INST_ADD_A_II16_C (SM_EX1 & opcf:['b'1000100])
$DEFINE INST_ADDC_A_I16_C (SM_EX1 & opcf:['b'1000101])
$DEFINE INST_XOR_A_I16_C (SM_EX1 & opcf:['b'1000110])
$DEFINE INST_OR_A_I16_C (SM_EX1 & opcf:['b'1001000])
$DEFINE INST_AND_A_I16_C (SM_EX1 & opcf:['b'1001010])
$DEFINE INST_STOREW_A_INDI16 (SM_EX1 & opcf:['b'1010000])
$DEFINE INST_STOREB_A_INDI16 (SM_EX1 & opcf:['b'1010001])
$DEFINE INST_LOADW_INDI16_C (SM_EX1 & opcf:['b'1010100])
$DEFINE INST_LOADB_INDI16_C (SM_EX1 & opcf:['b'1010101])
$DEFINE INST_JMP_I16 (SM_EX1 & opcf:['b'1011000])
$DEFINE INST_JZ_I16 (SM_EX1 & opcf:['b'1011001])
$DEFINE INST_JNZ_I16 (SM_EX1 & opcf:['b'1011010])
$DEFINE INST_JC_I16 (SM_EX1 & opcf:['b'1011011])
$DEFINE INST_JNC_I16 (SM_EX1 & opcf:['b'1011100])
$DEFINE INST_JV_I16 (SM_EX1 & opcf:['b'1011101])
$DEFINE INST_JNV_I16 (SM_EX1 & opcf:['b'1011110])
$DEFINE INST_STOREW_A_RI16 (SM_EX1 & opcf:['b'1100000])
$DEFINE INST_STOREB_A_RI16 (SM_EX1 & opcf:['b'1100001])
$DEFINE INST_LOADW_RI16_C (SM_EX1 & opcf:['b'1100100])
$DEFINE INST_LOADB_RI16_C (SM_EX1 & opcf:['b'1100101])
$DEFINE INST_LOADI_C_I16 (SM_EX1 & opcf:['b'1100110])
$DEFINE INST_JMP_INDI16 (SM_EX1 & opcf:['b'1101000])
$DEFINE INST_JZ_INDI16 (SM_EX1 & opcf:['b'1101001])
$DEFINE INST_JNZ_INDI16 (SM_EX1 & opcf:['b'1101010])
$DEFINE INST_JC_INDI16 (SM_EX1 & opcf:['b'1101011])
$DEFINE INST_JNC_INDI16 (SM_EX1 & opcf:['b'1101100])
$DEFINE INST_JV_INDI16 (SM_EX1 & opcf:['b'1101101])
$DEFINE INST_JNV_INDI16 (SM_EX1 & opcf:['b'1101110])
$DEFINE INST_CALL_INDI16 (SM_EX1 & opcf:['b'1110110])
$DEFINE INST_CALL_I16 (SM_EX1 & opcf:['b'1111000])
$DEFINE INST_CALL_I16_2 (SM_EX2 & opcf:['b'1111000])
$DEFINE INST_CALL_RI16 (SM_EX1 & opcf:['b'1111001])
$DEFINE INST_CALL_RI16_2 (SM_EX2 & opcf:['b'1111001])

$DEFINE INST_ALL_1_CYCLE_LONG (SM_EX1 & isize & icycles:['b'00XXXX,'b'01XXXX, 'b'10XXXX])
$DEFINE INST_ALL_JMP_RI16 (SM_EX1 & opcf:['b'1101XXX])
$DEFINE INST_ALL_JMP ((SM_EX1 & opcf:['b'X011XXX])#(SM_EX1 & opcf:['b'1101XXX]))
$DEFINE INST_ALL_MATHOPS (SM_EX1 & opcf:['b'X00XXXX] & !(opcf:['b'0000000]))
$DEFINE INST_ALL_SHIFT (SM_EX1 & opcf:['b'0100XXX])
$DEFINE INST_ALL_FIRST32 (SM_EX1 & opcf:['b'00XXXXX])


Pin[2] = D_CLK_IN;
Pin[83] = A_CLK_IN;
Pin[64] = B_CLK_IN;
Pin[73] = C_CLK_IN;
Pin[1]  = RESET_IN;
Pin[56,44,55,45,54,57,58] = [OPCB0..6];      /* Bits 0 to 6 of the low Instruction Register #1 */
Pin[60] = AD0;             /* Address Bus Bit 0 from BtoA buffer, for Byte Address Writes */
Pin[63] = OPCSIZEHINT;          /* A preview of the SIZE bit from the opcode section taken directly from the databus */
/* Control Signal Outputs */

Pin[40,52,41] = [ALU_FUNC0..2];
Pin[12] = IR2_OE;
Pin[16] = PC_BBOE;
Pin[48] = PC_ADOE;
Pin[39,35,31] = [PC_MODE0..2];
Pin[22] = SP_BBOE;
Pin[18] = SP_ADOE;
Pin[34,33] = [SP_MODE0..1];
Pin[37] = B2A_OE;
Pin[15] = RF_CWE;
Pin[30] = RF_FHZ;
Pin[46] = RF_BOE;
Pin[4] = ALU_OE;
Pin[5] = ALU_FL;
Pin[8] = ALU_WC;
Pin[28] = SHFT_OE;
Pin[17] = SFT_DIR;
Pin[20] = SHFT_AR;
Pin[6] = DBH_OE;
Pin[9] = DB_DIR;
Pin[50] = DBL_OE;
Pin[29] = H2L_DIR;
Pin[11] = H2L_OE;
Pin[49] = MEM_RW;
Pin[36] = MEM_AS;
Pin[25] = MEM_H_EN;
Pin[27] = MEM_L_EN;
Pin[51] = IR1_LATCH;
Pin[10] = IR2_LATCH;
Pin[67] = JMPINST;
Pin[24] = ALU_CFLATCH;
Pin[21] = SHFT_WC;
Pin[69] = HALT;
Pin[68] = SHFT_INVERTCARRY;
Pin[76] = D2A_OE;

/* Unused pins, reserved for future use */

Pin[65] = UNUSED1;
Pin[74] = UNUSED2;
Pin[75] = UNUSED3;

Pin[77] = UNUSED5;
Pin[79] = UNUSED6;
Pin[80] = UNUSED7;
Pin[81] = UNUSED8;
Pin[84] = UNUSED9;

/* Statment to force B_CLK_IN to be instantiated */

UNUSED1 = B_CLK_IN & HALT # C_CLK_IN # (UNUSED2 & UNUSED3 & UNUSED5 & UNUSED6 & UNUSED7 & UNUSED8 & UNUSED9) ;


/* The core internal CPU state machine:

    State       Operation       Next State
    0           Fetch 0         1(S==1) or 2(S==0)
    1           Fetch 1         2
    2           Execute 0       3(C==1) or 0(C==0) 
    3           Execute 1       0

    S=1 for 32 bit instruction, 0 for 16 bit instruction
    C=1 for 2 cycle instruction, 0 for 1 cycle instruction
    

    Implementation, S=Instruction size bit, C=Exec Cycles bit.

    State   Next Bit0   Next Bit1   
    0       S           /S          
    1       0           1           
    2       C           C         
    3       0           0          
    

*/

PIN[61,70] =  [CSM0..1];
FIELD stm = [CSM0..1];

/* 
   preisize is the instuction size hint directly from the data bus, and is only valid at the end of the F1 machine cycle
   isize is the instruction size that is valid during the entire execution of the instruction 
*/

preisize = OPCSIZEHINT;   /* 0 = 16 bit instruction, 1 = 32 bit instruction */
isize = OPCB6;
FIELD icycles = [OPCB5..OPCB4]; /* 00,01,10 for single cycle, 11 for two cycle instruction */

[CSM0..1].ck = D_CLK_IN;
[CSM0..1].ar = !RESET_IN # !HALT;         // It is critical that RESET unassert at D_CLK_IN^ 

/* If HALT == 0, we are in a HALT state, so the state machine will never advance past state 0 */

CSM0.d = (stm:['d'0] & preisize) 
       # (stm:['d'2] & OPCB5 & OPCB4);

CSM1.d = (stm:['d'0] & !preisize)
       # (stm:['d'1]) 
       # (stm:['d'2] & OPCB5 & OPCB4);

/* These 4 flags are 1 in each of the 4 states.   
    SM_F1 and SM_F2 for fetch cycle 1 and 2
    SM_EX1 and SM_EX2 for execute cycle 1 and 2.
*/

SM_F1 = stm:['d'0];
SM_F2 = stm:['d'1];
SM_EX1 = stm:['d'2];
SM_EX2 = stm:['d'3];

/* OPC is the instruction opcode */
FIELD opcf=[OPCB0..6];

/* For every control output we will clock those output pins on the A clock */

[ALU_FUNC0..2].ck = A_CLK_IN;
[ALU_FUNC0..2].ar = !RESET_IN;
IR2_OE.ck = A_CLK_IN;
IR2_OE.ap = !RESET_IN;
PC_BBOE.ck = A_CLK_IN;
PC_BBOE.ap = !RESET_IN;
PC_ADOE.ck = A_CLK_IN;
PC_ADOE.ap = !RESET_IN;
[PC_MODE0..2].ck = A_CLK_IN;
[PC_MODE0..2].ar = !RESET_IN # !HALT;            // IF HALT MODE, PCMODE is stuck at 00 which means no increment
SP_BBOE.ck = A_CLK_IN;
SP_BBOE.ap = !RESET_IN;
SP_ADOE.ck = A_CLK_IN;
SP_ADOE.ap = !RESET_IN;
[SP_MODE0..1].ck = A_CLK_IN;
[SP_MODE0..1].ar = !RESET_IN;
B2A_OE.ck = A_CLK_IN;
B2A_OE.ap = !RESET_IN;
RF_CWE.ck = A_CLK_IN;
RF_CWE.ap = !RESET_IN;
RF_FHZ.ck = A_CLK_IN;
RF_FHZ.ap = !RESET_IN;
RF_BOE.ck = A_CLK_IN;
RF_BOE.ap = !RESET_IN;
ALU_OE.ck = A_CLK_IN;
ALU_OE.ap = !RESET_IN;
ALU_FL.ck = A_CLK_IN;
ALU_FL.ap = !RESET_IN;
ALU_WC.ck = A_CLK_IN;
ALU_WC.ap = !RESET_IN;
SHFT_OE.ck = A_CLK_IN;
SHFT_OE.ap = !RESET_IN;
SFT_DIR.ck = A_CLK_IN;
SFT_DIR.ap = !RESET_IN;
SHFT_AR.ck = A_CLK_IN;
SHFT_AR.ap = !RESET_IN;
DBH_OE.ck = A_CLK_IN;
DBH_OE.ap = !RESET_IN;
DB_DIR.ck = A_CLK_IN;
DB_DIR.ap = !RESET_IN;
H2L_DIR.ck = A_CLK_IN;
H2L_DIR.ap = !RESET_IN;
IR1_LATCH.ck = A_CLK_IN;
IR1_LATCH.ap = !RESET_IN;
IR2_LATCH.ck = A_CLK_IN;
IR2_LATCH.ap = !RESET_IN;
JMPINST.ck = A_CLK_IN;
JMPINST.ap = !RESET_IN;
ALU_CFLATCH.ck = A_CLK_IN;
ALU_CFLATCH.ap = !RESET_IN;
SHFT_WC.ck = A_CLK_IN;
SHFT_WC.ap = !RESET_IN;
HALT.ck = A_CLK_IN;
HALT.ap = !RESET_IN;
SHFT_INVERTCARRY.ck = A_CLK_IN;
SHFT_INVERTCARRY.ap = !RESET_IN;
D2A_OE.ck = A_CLK_IN;
D2A_OE.ap = !RESET_IN;



/* The following signals need to be clocked after the A_CLK as they depend on the A0 signal which is only available after the 
   signals above drive an address onto the BBUS.
*/

/* MEM_RESET will be a 1/4 clock cycle pulse at the start of the D_CLK cycle.  It is used to reset the memory
   output signals and end a memory cycle at the D_CLK rising edge */

MEM_RESET = (!A_CLK_IN & D_CLK_IN);

H2L_OE.ck = B_CLK_IN;
H2L_OE.ap = !RESET_IN # MEM_RESET;
MEM_AS.ck = B_CLK_IN;
MEM_AS.ap = !RESET_IN # MEM_RESET;
MEM_H_EN.ck = B_CLK_IN;
MEM_H_EN.ap = !RESET_IN # MEM_RESET;
MEM_L_EN.ck = B_CLK_IN;
MEM_L_EN.ap = !RESET_IN # MEM_RESET;
DBL_OE.ck = B_CLK_IN;
DBL_OE.ap = !RESET_IN # MEM_RESET;
MEM_RW.ck = A_CLK_IN;
MEM_RW.ap = !RESET_IN;

/* ALU Function derived from opcode.   
   If OPCB5 == 0,  ALU_FUNC0..2 = OPCB1..3
   If OPCB5 == 1,  ALU_FUNC0..2 = OPCB3 # OPCB2 # OPCB1

   OPCB
   000XXXX  }
   001XXXX   }
   100XXXX    }  All of these should pass thru B1,2,3 for ALU function.       
   101XXXX  }

   010XXXX  }
   011XXXX   }
   110XXXX    }  All of these should set ALU function to the OR of B1,2,3 (so if all three are 0, ALU gets 000)
   111XXXX  }

   This translates to all instructions that start with 000,001,100, and 101 have the ALU function based on OPCB1..3
   while the rest of the instructions have ALU function 111 if any of OPCB1,2,3 is 1, otherwise 000.
   
   This makes the first 32 instrutions of each 64 instruction segment have all of the ALU functions, while the second
   bank of 32 instructions has the ALU Function Pass_A or Pass_B.
 */

ALU_FUNC0.d = (OPCB1#OPCB5) & ( !OPCB5 # OPCB3 # OPCB2 # OPCB1);
ALU_FUNC1.d = (OPCB2#OPCB5) & ( !OPCB5 # OPCB3 # OPCB2 # OPCB1);
ALU_FUNC2.d = (OPCB3#OPCB5) & ( !OPCB5 # OPCB3 # OPCB2 # OPCB1);


/* Output Enable for instructions that have imm16 values in the second instruction word */
IR2_OE.d = !(   INST_CALL_I16_2                          
              # INST_CALL_RI16_2
              # INST_ALL_1_CYCLE_LONG           
            );
/* Program Counter on BBUS output enable */
PC_BBOE.d = !(  INST_MOV_PC_C                                       
              # INST_CALL_B
              # INST_CALL_I16
              # INST_CALL_RI16                         
             );
/* Program Counter on ADBUS output enable */
PC_ADOE.d = !(SM_F1 # SM_F2
              # INST_STOREW_A_RI16
              # INST_STOREB_A_RI16
              # INST_LOADW_RI16_C
              # INST_LOADB_RI16_C );

/* 
       PC_MODE Inputs  2/1/0 (3 bits)
        000          Do Nothing
        001          Increment PC Register by 2 (bit 0 is always 0)  [FETCH]
        010          Load PC Register from BBUS [JMP DIRECT, CALL DIRECT]
        011          Add to PC Register from BBUS (Relative Jump), ignore bit 0 from BBUS, latch back into PC. [JMP RELATIVE, CALL RELATIVE]
        100          Add PC Register Value to BBUS and output on AD immediatly, but don't latch back into the PC register


       When in SM_F1 or SM_F2, PC_MODE is 001 (increment).
       If a JUMP instruction is active, the JMPINST flag is sent to the PC CPLD which allows it to set the PC_MODE1 to 1 if the 
          jump should happen, and to PC_MODE0 if it should not.  As a result on this side we just need to set PC_MODE0 to the correct
          value for either a direct or relative jump, as well as the default increment for instruction fetch.


       If we are in EX1 for the relative JMP instructions (1011XXX) PC_MODE0 is 1 (add to PC if JMPINST asserted).
       If we are in EX2 for the CALL B, RET, or CALL imm16 PCMODE1 is 1

       PC_MODE2 is used for the relative LOAD and STORE instructions, as those need the PC+imm16 put on the address
       bus, but NOT relatched back into the prorgram counter. (since it is not a jmp/call)

*/

PC_MODE0.d = ( (SM_F1 # SM_F2)
              # INST_ALL_JMP_RI16         
              # INST_CALL_RI16_2         
              );
PC_MODE1.d = (  INST_CALL_B_2           
              # INST_RET_2
              # INST_CALL_I16_2   
              # INST_CALL_RI16_2  
              ); 

PC_MODE2.d = ( INST_STOREW_A_RI16
              # INST_STOREB_A_RI16
              # INST_LOADW_RI16_C
              # INST_LOADB_RI16_C);




/* Stack Pointer on BBUS output enable */
SP_BBOE.d = !(INST_MOV_SP_C);             // 'MOV SP,C'

/* Stack Pointer on ADBUS output enable */
SP_ADOE.d = !(   INST_PUSH_B         
              #  INST_POP_C_2          
              #  INST_CALL_B         
              #  INST_RET_2
              #  INST_CALL_I16 
              #  INST_CALL_RI16
              );

SP_MODE0.d = (  INST_PUSH_B         
              #  INST_POP_C         
              #  INST_CALL_B         
              #  INST_RET
              #  INST_CALL_I16 
              #  INST_CALL_RI16          
              );


SP_MODE1.d = (  INST_MOV_B_SP
              #  INST_PUSH_B                 
              #  INST_CALL_B         
              #  INST_CALL_I16 
              #  INST_CALL_RI16            
              );



B2A_OE.d =   !( INST_STOREW_A_INDB
              # INST_STOREB_A_INDB
              # INST_LOADW_INDB_C
              # INST_LOADB_INDB_C
              # INST_STOREW_A_INDI16
              # INST_STOREB_A_INDI16
              # INST_LOADW_INDI16_C
              # INST_LOADB_INDI16_C
              );

RF_CWE.d = !(   INST_ALL_MATHOPS
              # INST_LOADW_INDB_C # INST_LOADB_INDB_C
              # INST_ALL_SHIFT 
              # INST_MOV_SP_C
              # INST_MOV_B_C
              # INST_MOV_PC_C
              # INST_POP_C_2
              # INST_LOADW_INDI16_C # INST_LOADB_INDI16_C
              # INST_LOADW_RI16_C # INST_LOADB_RI16_C 
              # INST_LOADI_C_I16 
              );

RF_FHZ.d = !( INST_LOADB_INDB_C # INST_LOADB_INDI16_C # INST_LOADB_RI16_C );     

RF_BOE.d = !(   INST_ALL_FIRST32          // First 32 instructions - Math, Jump
              # INST_ALL_SHIFT
              # INST_PUSH_B
              # INST_CALL_B_2
              # INST_MOV_B_C
              # INST_MOV_B_SP
              );

ALU_OE.d = !(   INST_ALL_MATHOPS
              # INST_STOREW_A_INDB # INST_STOREB_A_INDB
              # INST_MOV_SP_C
              # INST_MOV_B_C
              # INST_MOV_PC_C
              # INST_PUSH_B
              # INST_STOREW_A_INDI16 # INST_STOREB_A_INDI16
              # INST_STOREW_A_RI16 # INST_STOREB_A_RI16
              # INST_LOADI_C_I16
              # INST_CMP_A_B
              );

/* ALU_FL - ALU Change Flags on this operation */

ALU_FL.d = !(   INST_ALL_MATHOPS
              # INST_CMP_A_B
              # INST_MOV_SP_C
              # INST_MOV_B_C
              # INST_MOV_PC_C
              );

ALU_WC.d =  !(  INST_SUBC_A_B_C
              # INST_ADDC_A_B_B
              # INST_SUBC_A_I16_C
              # INST_ADDC_A_I16_C      
              );

ALU_CFLATCH.d = !( INST_CMPC
                 # INST_ALL_SHIFT
              );

SHFT_INVERTCARRY.d = !( INST_CMPC );      
SHFT_OE.d =  !( INST_ALL_SHIFT );  
SFT_DIR.d = !(  INST_SHL_B_C_CNT # INST_SHLC_B_C_CNT );
SHFT_AR.d = !( INST_SHRA_B_C_CNT );
SHFT_WC.d = !( INST_SHLC_B_C_CNT);
      
DBH_OE.d = !(   INST_STOREW_A_INDB
              # INST_LOADW_INDB_C
              # INST_PUSH_B
              # INST_POP_C_2
              # INST_STOREW_A_INDI16
              # INST_LOADW_INDI16_C
              # INST_STOREW_A_RI16
              # INST_LOADW_RI16_C
              );
DBL_OE.d = !(   INST_STOREW_A_INDB 
              # (INST_STOREB_A_INDB & !AD0)
              # INST_LOADW_INDB_C
              # (INST_LOADB_INDB_C & !AD0)
              # INST_PUSH_B
              # INST_POP_C_2
              # INST_STOREW_A_INDI16 
              # (INST_STOREB_A_INDI16 & !AD0)
              # INST_LOADW_INDI16_C
              # (INST_LOADB_INDI16_C & !AD0)
              # INST_STOREW_A_RI16 
              # (INST_STOREB_A_RI16 & !AD0)
              # INST_LOADW_RI16_C
              # (INST_LOADB_RI16_C & !AD0)
              );

DB_DIR.d = !(   INST_STOREW_A_INDB # INST_STOREB_A_INDB
              # INST_PUSH_B
              # INST_STOREW_A_INDI16 # INST_STOREB_A_INDI16
              # INST_STOREW_A_RI16 # INST_STOREB_A_RI16
              );

H2L_OE.d = !(   (INST_STOREB_A_INDB & AD0)
              # (INST_LOADB_INDB_C & AD0)
              # (INST_STOREB_A_INDI16 & AD0)
              # (INST_LOADB_INDI16_C & AD0)
              # (INST_STOREB_A_RI16 & AD0)
              # (INST_LOADB_RI16_C & AD0)
              );


H2L_DIR.d = !(  INST_STOREB_A_INDB
              # INST_STOREB_A_INDI16
              # INST_STOREB_A_RI16);


MEM_RW.d = !(   INST_STOREW_A_INDB
              # INST_STOREB_A_INDB  
              # INST_PUSH_B
              # INST_CALL_B
              # INST_STOREW_A_INDI16
              # INST_STOREB_A_INDI16
              # INST_STOREW_A_RI16
              # INST_STOREB_A_RI16
              # INST_CALL_I16
              # INST_CALL_RI16
              );

MEM_AS.d = !(  (SM_F1 # SM_F2)
              # INST_STOREW_A_INDB
              # INST_STOREB_A_INDB
              # INST_LOADW_INDB_C
              # INST_LOADB_INDB_C
              # INST_PUSH_B
              # INST_POP_C_2
              # INST_CALL_B
              # INST_RET_2
              # INST_STOREW_A_INDI16
              # INST_STOREB_A_INDI16
              # INST_LOADW_INDI16_C
              # INST_LOADB_INDI16_C
              # INST_STOREW_A_RI16
              # INST_STOREB_A_RI16
              # INST_LOADW_RI16_C
              # INST_LOADB_RI16_C 
              # INST_CALL_I16
              # INST_CALL_RI16
              );

MEM_L_EN.d = !( (SM_F1 # SM_F2)
               # INST_STOREW_A_INDB
              # (INST_STOREB_A_INDB & !AD0)
              # INST_LOADW_INDB_C   
              # (INST_LOADB_INDB_C & !AD0)
              # INST_PUSH_B
              # INST_POP_C_2
              # INST_CALL_B
              # INST_RET_2
              # INST_STOREW_A_INDI16
              # (INST_STOREB_A_INDI16 & !AD0)
              # INST_LOADW_INDI16_C
              # (INST_LOADB_INDI16_C & !AD0)
              # INST_STOREW_A_RI16
              # (INST_STOREB_A_RI16 & !AD0)
              # INST_LOADW_RI16_C
              # (INST_LOADB_RI16_C & !AD0)
              # INST_CALL_I16
              # INST_CALL_RI16 
              );

MEM_H_EN.d = !( (SM_F1 # SM_F2)
              # INST_STOREW_A_INDB
              # (INST_STOREB_A_INDB & AD0)
              # INST_LOADW_INDB_C   
              # (INST_LOADB_INDB_C & AD0)
              # INST_PUSH_B
              # INST_POP_C_2
              # INST_CALL_B
              # INST_RET_2
              # INST_STOREW_A_INDI16
              # (INST_STOREB_A_INDI16 & AD0)
              # INST_LOADW_INDI16_C
              # (INST_LOADB_INDI16_C & AD0)
              # INST_STOREW_A_RI16
              # (INST_STOREB_A_RI16 & AD0)
              # INST_LOADW_RI16_C
              # (INST_LOADB_RI16_C & AD0)
              # INST_CALL_I16
              # INST_CALL_RI16 
              );

IR1_LATCH.d = !( SM_F1 );
IR2_LATCH.d = !( ( SM_F2 ) );     
JMPINST.d = !(INST_ALL_JMP);
HALT.d = !( INST_HALT );     

D2A_OE.d = !(INST_RET_2);

/*
Total dedicated input used:	4/4 	(100%)
Total I/O pins used		64/64 	(100%)
Total Logic cells used 		54/128 	(42%)
Total Flip-Flop used 		41/128 	(32%)
Total Foldback logic used 	4/128 	(3%)
Total Nodes+FB/MCells 		57/128 	(44%)
Total cascade used 		1
Total input pins 		26
Total output pins 		42
Total Pts 			193
*/


